

options {
  LOOKAHEAD = 2;
  FORCE_LA_CHECK = true;
  JAVA_UNICODE_ESCAPE = true;
  ERROR_REPORTING = false;
  STATIC = false;
  COMMON_TOKEN_ACTION = false;
  OUTPUT_DIRECTORY = "java/";
  JDK_VERSION = "1.6";
}

PARSER_BEGIN(MIPSParser)

import java.util.ArrayList;

public class MIPSParser
{
    ArrayList<Instruction> instrs;
	public void parse() throws ParseException
	{
	    input();
	}

    public static void printParseException(ParseException pe)
    {
    	System.err.println(pe.getMessage());
    }

    public ArrayList<Instruction> getInstrs()
    {
        return instrs;
    }
}
PARSER_END(MIPSParser)

/* RESERVED INSTRUCTION NAMES */
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMMENTS */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|	<"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|	"/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

TOKEN :
{
	< NOP:		"nop">
|	< ADD:		"add" >
|	< ADDI:		"addi" >
|	< ADDIU:	"addiu" >
|	< ADDU:		"addu" >
|	< CLO:		"clo" >
|	< CLZ:		"clz" >
|	< DIV:		"div" >
|	< DIVU:		"divu" >
}

TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
}

TOKEN :
{
   < REG_LOGO: "$" >
}
/** Root production. */

void input() throws ParseException:
{
    instrs = new ArrayList<Instruction>();
}
{
    (instruction())* <EOF>
}

void instruction() throws ParseException:
{
    Token t;
    int rs, rd, rt, imm, target, offset;
}
{
    <NOP> {instrs.add(new Nop());}
|
    <ADD> rd=get_reg() rs=get_reg() rt=get_reg()
    {instrs.add(new Add(rd, rs, rt));}
|
    <ADDI> rt=get_reg() rs=get_reg() imm=get_imm()
    {instrs.add(new AddI(rs,rt,imm));}
}

int get_reg() throws ParseException:
{
    Token t;
    int r;
}
{
    <REG_LOGO>
    t = <INTEGER_LITERAL> {return Utils.parseInt(t.image);}
}

int get_imm() throws ParseException:
{
    Token t;
    int i;
}
{
    t = <INTEGER_LITERAL> {return Utils.parseInt(t.image);}
}