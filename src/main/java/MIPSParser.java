/* MIPSParser.java */
/* Generated By:JavaCC: Do not edit this line. MIPSParser.java */
import java.util.ArrayList;

public class MIPSParser implements MIPSParserConstants {
    ArrayList<Instruction> instrs;
        public void parse() throws ParseException
        {
            input();
        }

    public static void printParseException(ParseException pe)
    {
        System.err.println(pe.getMessage());
    }

    public ArrayList<Instruction> getInstrs()
    {
        return instrs;
    }

/** Root production. */
  final public 
void input() throws ParseException, ParseException {instrs = new ArrayList<Instruction>();
    label_1:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_1;
      }
      instruction();
    }
    jj_consume_token(0);
  }

  final public void instruction() throws ParseException, ParseException {Token t;
    int rs, rd, rt, imm, target, offset;
    if (jj_2_2(2)) {
      jj_consume_token(NOP);
instrs.add(new Nop());
    } else if (jj_2_3(2)) {
      jj_consume_token(ADD);
      rd = get_reg();
      rs = get_reg();
      rt = get_reg();
instrs.add(new Add(rd, rs, rt));
    } else if (jj_2_4(2)) {
      jj_consume_token(ADDI);
      rt = get_reg();
      rs = get_reg();
      imm = get_imm();
instrs.add(new AddI(rs,rt,imm));
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public int get_reg() throws ParseException, ParseException {Token t;
    int r;
    jj_consume_token(REG_LOGO);
    t = jj_consume_token(INTEGER_LITERAL);
{if ("" != null) return Utils.parseInt(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public int get_imm() throws ParseException, ParseException {Token t;
    int i;
    t = jj_consume_token(INTEGER_LITERAL);
{if ("" != null) return Utils.parseInt(t.image);}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_3_4()
 {
    if (jj_scan_token(ADDI)) return true;
    if (jj_3R_3()) return true;
    return false;
  }

  private boolean jj_3R_3()
 {
    if (jj_scan_token(REG_LOGO)) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_2()) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_scan_token(ADD)) return true;
    if (jj_3R_3()) return true;
    return false;
  }

  private boolean jj_3R_2()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_scan_token(NOP)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public MIPSParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;

  /** Constructor with InputStream. */
  public MIPSParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MIPSParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MIPSParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Constructor. */
  public MIPSParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new MIPSParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Constructor with generated Token Manager. */
  public MIPSParser(MIPSParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(MIPSParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      return token;
    }
    token = oldToken;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    Token errortok = token.next;
    int line = errortok.beginLine, column = errortok.beginColumn;
    String mess = (errortok.kind == 0) ? tokenImage[0] : errortok.image;
    return new ParseException("Parse error at line " + line + ", column " + column + ".  Encountered: " + mess);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
