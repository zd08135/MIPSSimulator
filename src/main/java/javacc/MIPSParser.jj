

options {
  LOOKAHEAD = 2;
  FORCE_LA_CHECK = true;
  JAVA_UNICODE_ESCAPE = true;
  ERROR_REPORTING = false;
  STATIC = false;
  COMMON_TOKEN_ACTION = false;
  OUTPUT_DIRECTORY = "../parser/";
  JDK_VERSION = "1.6";
}

PARSER_BEGIN(MIPSParser)

package parser;

import java.util.ArrayList;

import instructions.*;
import main.Utils;

public class MIPSParser
{
    ArrayList<Instruction> instrs;
	public void parse() throws ParseException
	{
	    input();
	}

    public static void printParseException(ParseException pe)
    {
    	System.err.println(pe.getMessage());
    }

    public ArrayList<Instruction> getInstrs()
    {
        return instrs;
    }
}
PARSER_END(MIPSParser)

/* RESERVED INSTRUCTION NAMES */
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMMENTS */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|	<"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|	"/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

TOKEN :
{
	< NOP:		"nop">
/*  alu instrs */
|	< ADD:		"add" >
|	< ADDI:		"addi" >
|	< ADDIU:	"addiu" >
|	< ADDU:		"addu" >
|   < SUB:      "sub" >
|   < SUBU:     "subu" >
|	< CLO:		"clo" >
|	< CLZ:		"clz" >
|   < SLT:      "slt" >
|   < SLTI:     "slti" >
|   < SLTIU:    "sltiu" >
|   < SEB:      "seb" >
|   < SEH:      "seh" >
/* logic instrs */
|   < AND:      "and" >
|   < ANDI:     "andi" >
|   < LUI:      "lui" >
|   < NOR:      "nor" >
|   < OR:       "or" >
|   < ORI:      "ori" >
|   < XOR:      "xor" >
|   < XORI:     "xori" >
/* shift instrs */
|   < SLL:      "sll" >
|   < SLLV:     "sllv" >
|   < SRA:      "sra" >
|   < SRAV:     "srav" >
|   < SRL:      "srl" >
|   < SRLV:     "srlv" >
|   < ROTR:     "rotr" >
|   < ROTRV:    "rotrv" >
/*  jump instrs */
|   < B:        "b" >
|   < BAL:      "bal" >
|   < BGEZ:     "bgez" >
|   < BGTZ:     "bgtz" >
|   < BGEZAL:   "bgezal" >
|   < BLEZ:     "blez" >
|   < BLTZ:     "bltz" >
|   < BLTZAL:   "bltzal" >
|   < BEQ:      "beq" >
|   < BNE:      "bne" >
|   < J:        "j" >
|   < JAL:      "jal" >
}

TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
}

TOKEN :
{
   < REG_LOGO: "$" >
}
/** Root production. */

void input() throws ParseException:
{
    instrs = new ArrayList<Instruction>();
}
{
    (instruction())* <EOF>
}

void instruction() throws ParseException:
{
    Token t;
    int rs, rd, rt, shamt, target;
    short imm, offset;
}
{
    <NOP>
    {instrs.add(new Nop());}
/* alu instrs */
|
    <ADD> rd=get_reg() rs=get_reg() rt=get_reg()
    {instrs.add(new Add(rd, rs, rt));}
|
    <ADDI> rt=get_reg() rs=get_reg() imm=get_imm()
    {instrs.add(new Addi(rs, rt, imm));}
|
	<ADDIU> rt=get_reg() rs=get_reg() imm=get_imm()
    {instrs.add(new Addiu(rs, rt, imm));}
|
	<ADDU> rd=get_reg() rs=get_reg() rt=get_reg()
    {instrs.add(new Addu(rd, rs, rt));}
|
    <SUB> rd=get_reg() rs=get_reg() rt=get_reg()
    {instrs.add(new Sub(rd, rs, rt));}
|
	<SUBU> rd=get_reg() rs=get_reg() rt=get_reg()
    {instrs.add(new Subu(rd, rs, rt));}
|
    <CLO> rd=get_reg() rs=get_reg()
    {instrs.add(new Clo(rd, rs));}
|
    <CLZ> rd=get_reg() rs=get_reg()
    {instrs.add(new Clz(rd, rs));}
|
    <SLT> rd=get_reg() rs=get_reg() rt=get_reg()
    {instrs.add(new Slt(rd, rs, rt));}
|
    <SLTI> rt=get_reg() rs=get_reg() imm=get_imm()
    {instrs.add(new Slti(rs, rt, imm));}
|
    <SLTIU> rt=get_reg() rs=get_reg() imm=get_imm()
    {instrs.add(new Sltiu(rs, rt, imm));}
|
    <SEB> rd=get_reg() rt=get_reg()
    {instrs.add(new Seb(rd, rt));}
|
    <SEH> rd=get_reg() rt=get_reg()
    {instrs.add(new Seh(rd, rt));}
/* logical instrs */
|
    <AND> rd=get_reg() rs=get_reg() rt=get_reg()
    {instrs.add(new And(rd, rs, rt));}
|
    <ANDI> rt=get_reg() rs=get_reg() imm=get_imm()
    {instrs.add(new Andi(rs, rt, imm));}
|
    <LUI> rt=get_reg() imm=get_imm()
    {instrs.add(new Lui(rt, imm));}
|
    <NOR> rd=get_reg() rs=get_reg() rt=get_reg()
    {instrs.add(new Nor(rd, rs, rt));}
|
    <OR> rd=get_reg() rs=get_reg() rt=get_reg()
    {instrs.add(new Or(rd, rs, rt));}
|
    <ORI> rt=get_reg() rs=get_reg() imm=get_imm()
    {instrs.add(new Ori(rs, rt, imm));}
|
    <XOR> rd=get_reg() rs=get_reg() rt=get_reg()
    {instrs.add(new Xor(rd, rs, rt));}
|
    <XORI> rt=get_reg() rs=get_reg() imm=get_imm()
    {instrs.add(new Xori(rs, rt, imm));}
|
/* shift instrs */
    <SLL> rd=get_reg() rt=get_reg() shamt=get_shamt()
    {instrs.add(new Sll(rd, rt, shamt));}
|
    <SLLV> rd=get_reg() rt=get_reg() rs=get_reg()
    {instrs.add(new Sllv(rd, rt, rs));}
|
    <SRA> rd=get_reg() rt=get_reg() shamt=get_shamt()
    {instrs.add(new Sra(rd, rt, shamt));}
|
    <SRAV> rd=get_reg() rt=get_reg() rs=get_reg()
    {instrs.add(new Srav(rd, rt, rs));}
|
    <SRL> rd=get_reg() rt=get_reg() shamt=get_shamt()
    {instrs.add(new Srl(rd, rt, shamt));}
|
    <SRLV> rd=get_reg() rt=get_reg() rs=get_reg()
    {instrs.add(new Srlv(rd, rt, rs));}
|
    <ROTR> rd=get_reg() rt=get_reg() shamt=get_shamt()
    {instrs.add(new Rotr(rd, rt, shamt));}
|
    <ROTRV> rd=get_reg() rt=get_reg() rs=get_reg()
    {instrs.add(new Rotrv(rd, rt, rs));}
|
/* branch instrs */
    <B> offset=get_offset()
    {instrs.add(new B(offset));}
|
    <BAL> offset=get_offset()
    {instrs.add(new Bal(offset));}
|
    <BGEZ> rs=get_reg() offset=get_offset()
    {instrs.add(new Bgez(rs, offset));}
|
    <BGTZ> rs=get_reg() offset=get_offset()
    {instrs.add(new Bgtz(rs, offset));}
|
    <BGEZAL> rs=get_reg() offset=get_offset()
    {instrs.add(new Bgezal(rs, offset));}
|
    <BLEZ> rs=get_reg() offset=get_offset()
    {instrs.add(new Blez(rs, offset));}
|
    <BLTZ> rs=get_reg() offset=get_offset()
    {instrs.add(new Bltz(rs, offset));}
|
    <BLTZAL> rs=get_reg() offset=get_offset()
    {instrs.add(new Bltzal(rs, offset));}
|
    <BEQ> rs=get_reg() rt=get_reg() offset=get_offset()
    {instrs.add(new Beq(rs,rt,offset));}
|
    <BNE> rs=get_reg() rt=get_reg() offset=get_offset()
    {instrs.add(new Bne(rs,rt,offset));}
|
    <J> target=get_target()
    {instrs.add(new J(target));}
|
    <JAL> target=get_target()
    {instrs.add(new Jal(target));}
}

int get_reg() throws ParseException:
{
    Token t;
}
{
    <REG_LOGO>
    t = <INTEGER_LITERAL> {return Utils.parseInt(t.image);}
}

int get_target() throws ParseException:
{
    Token t;
}
{
    t = <INTEGER_LITERAL> {return Utils.parseInt(t.image);}
}

short get_imm() throws ParseException:
{
    Token t;
}
{
    t = <INTEGER_LITERAL> {return Utils.parseShort(t.image);}
}

int get_shamt() throws ParseException:
{
    Token t;
}
{
    t = <INTEGER_LITERAL> {return (Utils.parseShort(t.image) & 0x1f);}
}

short get_offset() throws ParseException:
{
    Token t;
}
{
    t = <INTEGER_LITERAL> {return Utils.parseShort(t.image);}
}